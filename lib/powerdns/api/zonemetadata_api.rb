=begin
#PowerDNS Authoritative HTTP API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 0.0.13

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module PowerDNS
  class ZonemetadataApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Creates a set of metadata entries
    # Creates a set of metadata entries of given kind for the zone. Existing metadata entries for the zone with the same kind are not overwritten.
    # @param server_id The id of the server to retrieve
    # @param zone_id 
    # @param metadata List of metadata to add/create
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_metadata(server_id, zone_id, metadata, opts = {})
      create_metadata_with_http_info(server_id, zone_id, metadata, opts)
      return nil
    end

    # Creates a set of metadata entries
    # Creates a set of metadata entries of given kind for the zone. Existing metadata entries for the zone with the same kind are not overwritten.
    # @param server_id The id of the server to retrieve
    # @param zone_id 
    # @param metadata List of metadata to add/create
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_metadata_with_http_info(server_id, zone_id, metadata, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZonemetadataApi.create_metadata ..."
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ZonemetadataApi.create_metadata"
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling ZonemetadataApi.create_metadata"
      end
      # verify the required parameter 'metadata' is set
      if @api_client.config.client_side_validation && metadata.nil?
        fail ArgumentError, "Missing the required parameter 'metadata' when calling ZonemetadataApi.create_metadata"
      end
      # resource path
      local_var_path = "/servers/{server_id}/zones/{zone_id}/metadata".sub('{' + 'server_id' + '}', server_id.to_s).sub('{' + 'zone_id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(metadata)
      auth_names = ['APIKeyHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZonemetadataApi#create_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete all items of a single kind of domain metadata.
    # 
    # @param server_id The id of the server to retrieve
    # @param zone_id The id of the zone to retrieve
    # @param metadata_kind ???
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_metadata(server_id, zone_id, metadata_kind, opts = {})
      delete_metadata_with_http_info(server_id, zone_id, metadata_kind, opts)
      return nil
    end

    # Delete all items of a single kind of domain metadata.
    # 
    # @param server_id The id of the server to retrieve
    # @param zone_id The id of the zone to retrieve
    # @param metadata_kind ???
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_metadata_with_http_info(server_id, zone_id, metadata_kind, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZonemetadataApi.delete_metadata ..."
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ZonemetadataApi.delete_metadata"
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling ZonemetadataApi.delete_metadata"
      end
      # verify the required parameter 'metadata_kind' is set
      if @api_client.config.client_side_validation && metadata_kind.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_kind' when calling ZonemetadataApi.delete_metadata"
      end
      # resource path
      local_var_path = "/servers/{server_id}/zones/{zone_id}/metadata/{metadata_kind}".sub('{' + 'server_id' + '}', server_id.to_s).sub('{' + 'zone_id' + '}', zone_id.to_s).sub('{' + 'metadata_kind' + '}', metadata_kind.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APIKeyHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZonemetadataApi#delete_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the content of a single kind of domain metadata as a list of MetaData objects.
    # 
    # @param server_id The id of the server to retrieve
    # @param zone_id The id of the zone to retrieve
    # @param metadata_kind ???
    # @param [Hash] opts the optional parameters
    # @return [Metadata]
    def get_metadata(server_id, zone_id, metadata_kind, opts = {})
      data, _status_code, _headers = get_metadata_with_http_info(server_id, zone_id, metadata_kind, opts)
      return data
    end

    # Get the content of a single kind of domain metadata as a list of MetaData objects.
    # 
    # @param server_id The id of the server to retrieve
    # @param zone_id The id of the zone to retrieve
    # @param metadata_kind ???
    # @param [Hash] opts the optional parameters
    # @return [Array<(Metadata, Fixnum, Hash)>] Metadata data, response status code and response headers
    def get_metadata_with_http_info(server_id, zone_id, metadata_kind, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZonemetadataApi.get_metadata ..."
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ZonemetadataApi.get_metadata"
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling ZonemetadataApi.get_metadata"
      end
      # verify the required parameter 'metadata_kind' is set
      if @api_client.config.client_side_validation && metadata_kind.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_kind' when calling ZonemetadataApi.get_metadata"
      end
      # resource path
      local_var_path = "/servers/{server_id}/zones/{zone_id}/metadata/{metadata_kind}".sub('{' + 'server_id' + '}', server_id.to_s).sub('{' + 'zone_id' + '}', zone_id.to_s).sub('{' + 'metadata_kind' + '}', metadata_kind.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APIKeyHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Metadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZonemetadataApi#get_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all the MetaData associated with the zone.
    # 
    # @param server_id The id of the server to retrieve
    # @param zone_id The id of the zone to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<Metadata>]
    def list_metadata(server_id, zone_id, opts = {})
      data, _status_code, _headers = list_metadata_with_http_info(server_id, zone_id, opts)
      return data
    end

    # Get all the MetaData associated with the zone.
    # 
    # @param server_id The id of the server to retrieve
    # @param zone_id The id of the zone to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Metadata>, Fixnum, Hash)>] Array<Metadata> data, response status code and response headers
    def list_metadata_with_http_info(server_id, zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZonemetadataApi.list_metadata ..."
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ZonemetadataApi.list_metadata"
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling ZonemetadataApi.list_metadata"
      end
      # resource path
      local_var_path = "/servers/{server_id}/zones/{zone_id}/metadata".sub('{' + 'server_id' + '}', server_id.to_s).sub('{' + 'zone_id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APIKeyHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Metadata>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZonemetadataApi#list_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Modify the content of a single kind of domain metadata.
    # 
    # @param server_id The id of the server to retrieve
    # @param zone_id 
    # @param metadata_kind The kind of metadata
    # @param metadata metadata to add/create
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def modify_metadata(server_id, zone_id, metadata_kind, metadata, opts = {})
      modify_metadata_with_http_info(server_id, zone_id, metadata_kind, metadata, opts)
      return nil
    end

    # Modify the content of a single kind of domain metadata.
    # 
    # @param server_id The id of the server to retrieve
    # @param zone_id 
    # @param metadata_kind The kind of metadata
    # @param metadata metadata to add/create
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def modify_metadata_with_http_info(server_id, zone_id, metadata_kind, metadata, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZonemetadataApi.modify_metadata ..."
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ZonemetadataApi.modify_metadata"
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling ZonemetadataApi.modify_metadata"
      end
      # verify the required parameter 'metadata_kind' is set
      if @api_client.config.client_side_validation && metadata_kind.nil?
        fail ArgumentError, "Missing the required parameter 'metadata_kind' when calling ZonemetadataApi.modify_metadata"
      end
      # verify the required parameter 'metadata' is set
      if @api_client.config.client_side_validation && metadata.nil?
        fail ArgumentError, "Missing the required parameter 'metadata' when calling ZonemetadataApi.modify_metadata"
      end
      # resource path
      local_var_path = "/servers/{server_id}/zones/{zone_id}/metadata/{metadata_kind}".sub('{' + 'server_id' + '}', server_id.to_s).sub('{' + 'zone_id' + '}', zone_id.to_s).sub('{' + 'metadata_kind' + '}', metadata_kind.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(metadata)
      auth_names = ['APIKeyHeader']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZonemetadataApi#modify_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
