=begin
#PowerDNS Authoritative HTTP API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 0.0.13

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module PowerDNS
  class ZonesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Returns the zone in AXFR format.
    # 
    # @param server_id The id of the server to retrieve
    # @param zone_id The id of the zone to retrieve
    # @param [Hash] opts the optional parameters
    # @return [String]
    def axfr_export_zone(server_id, zone_id, opts = {})
      data, _status_code, _headers = axfr_export_zone_with_http_info(server_id, zone_id, opts)
      return data
    end

    # Returns the zone in AXFR format.
    # 
    # @param server_id The id of the server to retrieve
    # @param zone_id The id of the zone to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def axfr_export_zone_with_http_info(server_id, zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZonesApi.axfr_export_zone ..."
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ZonesApi.axfr_export_zone"
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling ZonesApi.axfr_export_zone"
      end
      # resource path
      local_var_path = "/servers/{server_id}/zones/{zone_id}/export".sub('{' + 'server_id' + '}', server_id.to_s).sub('{' + 'zone_id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APIKeyHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZonesApi#axfr_export_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a DNS NOTIFY to all slaves.
    # Fails when zone kind is not Master or Slave, or master and slave are disabled in the configuration. Only works for Slave if renotify is on. Clients MUST NOT send a body.
    # @param server_id The id of the server to retrieve
    # @param zone_id The id of the zone to retrieve
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def axfr_retrieve_zone(server_id, zone_id, opts = {})
      axfr_retrieve_zone_with_http_info(server_id, zone_id, opts)
      return nil
    end

    # Send a DNS NOTIFY to all slaves.
    # Fails when zone kind is not Master or Slave, or master and slave are disabled in the configuration. Only works for Slave if renotify is on. Clients MUST NOT send a body.
    # @param server_id The id of the server to retrieve
    # @param zone_id The id of the zone to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def axfr_retrieve_zone_with_http_info(server_id, zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZonesApi.axfr_retrieve_zone ..."
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ZonesApi.axfr_retrieve_zone"
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling ZonesApi.axfr_retrieve_zone"
      end
      # resource path
      local_var_path = "/servers/{server_id}/zones/{zone_id}/axfr-retrieve".sub('{' + 'server_id' + '}', server_id.to_s).sub('{' + 'zone_id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APIKeyHeader']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZonesApi#axfr_retrieve_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verify zone contents/configuration.
    # 
    # @param server_id The id of the server to retrieve
    # @param zone_id The id of the zone to retrieve
    # @param [Hash] opts the optional parameters
    # @return [String]
    def check_zone(server_id, zone_id, opts = {})
      data, _status_code, _headers = check_zone_with_http_info(server_id, zone_id, opts)
      return data
    end

    # Verify zone contents/configuration.
    # 
    # @param server_id The id of the server to retrieve
    # @param zone_id The id of the zone to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def check_zone_with_http_info(server_id, zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZonesApi.check_zone ..."
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ZonesApi.check_zone"
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling ZonesApi.check_zone"
      end
      # resource path
      local_var_path = "/servers/{server_id}/zones/{zone_id}/check".sub('{' + 'server_id' + '}', server_id.to_s).sub('{' + 'zone_id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APIKeyHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZonesApi#check_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new domain, returns the Zone on creation.
    # 
    # @param server_id The id of the server to retrieve
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :rrsets “true” (default) or “false”, whether to include the “rrsets” in the response Zone object. (default to true)
    # @return [Zone]
    def create_zone(server_id, opts = {})
      data, _status_code, _headers = create_zone_with_http_info(server_id, opts)
      return data
    end

    # Creates a new domain, returns the Zone on creation.
    # 
    # @param server_id The id of the server to retrieve
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :rrsets “true” (default) or “false”, whether to include the “rrsets” in the response Zone object.
    # @return [Array<(Zone, Fixnum, Hash)>] Zone data, response status code and response headers
    def create_zone_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZonesApi.create_zone ..."
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ZonesApi.create_zone"
      end
      # resource path
      local_var_path = "/servers/{server_id}/zones".sub('{' + 'server_id' + '}', server_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'rrsets'] = opts[:'rrsets'] if !opts[:'rrsets'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APIKeyHeader']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Zone')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZonesApi#create_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes this zone, all attached metadata and rrsets.
    # 
    # @param server_id The id of the server to retrieve
    # @param zone_id The id of the zone to retrieve
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_zone(server_id, zone_id, opts = {})
      delete_zone_with_http_info(server_id, zone_id, opts)
      return nil
    end

    # Deletes this zone, all attached metadata and rrsets.
    # 
    # @param server_id The id of the server to retrieve
    # @param zone_id The id of the zone to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_zone_with_http_info(server_id, zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZonesApi.delete_zone ..."
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ZonesApi.delete_zone"
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling ZonesApi.delete_zone"
      end
      # resource path
      local_var_path = "/servers/{server_id}/zones/{zone_id}".sub('{' + 'server_id' + '}', server_id.to_s).sub('{' + 'zone_id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APIKeyHeader']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZonesApi#delete_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # zone managed by a server
    # 
    # @param server_id The id of the server to retrieve
    # @param zone_id The id of the zone to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Zone]
    def list_zone(server_id, zone_id, opts = {})
      data, _status_code, _headers = list_zone_with_http_info(server_id, zone_id, opts)
      return data
    end

    # zone managed by a server
    # 
    # @param server_id The id of the server to retrieve
    # @param zone_id The id of the zone to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Zone, Fixnum, Hash)>] Zone data, response status code and response headers
    def list_zone_with_http_info(server_id, zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZonesApi.list_zone ..."
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ZonesApi.list_zone"
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling ZonesApi.list_zone"
      end
      # resource path
      local_var_path = "/servers/{server_id}/zones/{zone_id}".sub('{' + 'server_id' + '}', server_id.to_s).sub('{' + 'zone_id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APIKeyHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Zone')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZonesApi#list_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all Zones in a server
    # 
    # @param server_id The id of the server to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<Zone>]
    def list_zones(server_id, opts = {})
      data, _status_code, _headers = list_zones_with_http_info(server_id, opts)
      return data
    end

    # List all Zones in a server
    # 
    # @param server_id The id of the server to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Zone>, Fixnum, Hash)>] Array<Zone> data, response status code and response headers
    def list_zones_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZonesApi.list_zones ..."
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ZonesApi.list_zones"
      end
      # resource path
      local_var_path = "/servers/{server_id}/zones".sub('{' + 'server_id' + '}', server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APIKeyHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Zone>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZonesApi#list_zones\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a DNS NOTIFY to all slaves.
    # Fails when zone kind is not Master or Slave, or master and slave are disabled in the configuration. Only works for Slave if renotify is on. Clients MUST NOT send a body.
    # @param server_id The id of the server to retrieve
    # @param zone_id The id of the zone to retrieve
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def notify_zone(server_id, zone_id, opts = {})
      notify_zone_with_http_info(server_id, zone_id, opts)
      return nil
    end

    # Send a DNS NOTIFY to all slaves.
    # Fails when zone kind is not Master or Slave, or master and slave are disabled in the configuration. Only works for Slave if renotify is on. Clients MUST NOT send a body.
    # @param server_id The id of the server to retrieve
    # @param zone_id The id of the zone to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def notify_zone_with_http_info(server_id, zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZonesApi.notify_zone ..."
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ZonesApi.notify_zone"
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling ZonesApi.notify_zone"
      end
      # resource path
      local_var_path = "/servers/{server_id}/zones/{zone_id}/notify".sub('{' + 'server_id' + '}', server_id.to_s).sub('{' + 'zone_id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APIKeyHeader']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZonesApi#notify_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates/modifies/deletes RRsets present in the payload and their comments. Returns 204 No Content on success.
    # 
    # @param server_id The id of the server to retrieve
    # @param zone_id 
    # @param zone_struct The zone struct to patch with
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_zone(server_id, zone_id, zone_struct, opts = {})
      patch_zone_with_http_info(server_id, zone_id, zone_struct, opts)
      return nil
    end

    # Creates/modifies/deletes RRsets present in the payload and their comments. Returns 204 No Content on success.
    # 
    # @param server_id The id of the server to retrieve
    # @param zone_id 
    # @param zone_struct The zone struct to patch with
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_zone_with_http_info(server_id, zone_id, zone_struct, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZonesApi.patch_zone ..."
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ZonesApi.patch_zone"
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling ZonesApi.patch_zone"
      end
      # verify the required parameter 'zone_struct' is set
      if @api_client.config.client_side_validation && zone_struct.nil?
        fail ArgumentError, "Missing the required parameter 'zone_struct' when calling ZonesApi.patch_zone"
      end
      # resource path
      local_var_path = "/servers/{server_id}/zones/{zone_id}".sub('{' + 'server_id' + '}', server_id.to_s).sub('{' + 'zone_id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(zone_struct)
      auth_names = ['APIKeyHeader']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZonesApi#patch_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Modifies basic zone data (metadata).
    # Allowed fields in client body: all except id, url and name. Returns 204 No Content on success.
    # @param server_id The id of the server to retrieve
    # @param zone_id 
    # @param zone_struct The zone struct to patch with
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_zone(server_id, zone_id, zone_struct, opts = {})
      put_zone_with_http_info(server_id, zone_id, zone_struct, opts)
      return nil
    end

    # Modifies basic zone data (metadata).
    # Allowed fields in client body: all except id, url and name. Returns 204 No Content on success.
    # @param server_id The id of the server to retrieve
    # @param zone_id 
    # @param zone_struct The zone struct to patch with
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_zone_with_http_info(server_id, zone_id, zone_struct, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZonesApi.put_zone ..."
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ZonesApi.put_zone"
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling ZonesApi.put_zone"
      end
      # verify the required parameter 'zone_struct' is set
      if @api_client.config.client_side_validation && zone_struct.nil?
        fail ArgumentError, "Missing the required parameter 'zone_struct' when calling ZonesApi.put_zone"
      end
      # resource path
      local_var_path = "/servers/{server_id}/zones/{zone_id}".sub('{' + 'server_id' + '}', server_id.to_s).sub('{' + 'zone_id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(zone_struct)
      auth_names = ['APIKeyHeader']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZonesApi#put_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rectify the zone data.
    # This does not take into account the API-RECTIFY metadata. Fails on slave zones and zones that do not have DNSSEC.
    # @param server_id The id of the server to retrieve
    # @param zone_id The id of the zone to retrieve
    # @param [Hash] opts the optional parameters
    # @return [String]
    def rectify_zone(server_id, zone_id, opts = {})
      data, _status_code, _headers = rectify_zone_with_http_info(server_id, zone_id, opts)
      return data
    end

    # Rectify the zone data.
    # This does not take into account the API-RECTIFY metadata. Fails on slave zones and zones that do not have DNSSEC.
    # @param server_id The id of the server to retrieve
    # @param zone_id The id of the zone to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def rectify_zone_with_http_info(server_id, zone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ZonesApi.rectify_zone ..."
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ZonesApi.rectify_zone"
      end
      # verify the required parameter 'zone_id' is set
      if @api_client.config.client_side_validation && zone_id.nil?
        fail ArgumentError, "Missing the required parameter 'zone_id' when calling ZonesApi.rectify_zone"
      end
      # resource path
      local_var_path = "/servers/{server_id}/zones/{zone_id}/rectify".sub('{' + 'server_id' + '}', server_id.to_s).sub('{' + 'zone_id' + '}', zone_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APIKeyHeader']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ZonesApi#rectify_zone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
