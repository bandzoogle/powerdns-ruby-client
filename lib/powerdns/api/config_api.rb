=begin
#PowerDNS Authoritative HTTP API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 0.0.13

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module PowerDNS
  class ConfigApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Returns all ConfigSettings for a single server
    # 
    # @param server_id The id of the server to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<ConfigSetting>]
    def get_config(server_id, opts = {})
      data, _status_code, _headers = get_config_with_http_info(server_id, opts)
      return data
    end

    # Returns all ConfigSettings for a single server
    # 
    # @param server_id The id of the server to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ConfigSetting>, Fixnum, Hash)>] Array<ConfigSetting> data, response status code and response headers
    def get_config_with_http_info(server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConfigApi.get_config ..."
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ConfigApi.get_config"
      end
      # resource path
      local_var_path = "/servers/{server_id}/config".sub('{' + 'server_id' + '}', server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APIKeyHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ConfigSetting>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigApi#get_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a specific ConfigSetting for a single server
    # NOT IMPLEMENTED
    # @param server_id The id of the server to retrieve
    # @param config_setting_name The name of the setting to retrieve
    # @param [Hash] opts the optional parameters
    # @return [ConfigSetting]
    def get_config_setting(server_id, config_setting_name, opts = {})
      data, _status_code, _headers = get_config_setting_with_http_info(server_id, config_setting_name, opts)
      return data
    end

    # Returns a specific ConfigSetting for a single server
    # NOT IMPLEMENTED
    # @param server_id The id of the server to retrieve
    # @param config_setting_name The name of the setting to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConfigSetting, Fixnum, Hash)>] ConfigSetting data, response status code and response headers
    def get_config_setting_with_http_info(server_id, config_setting_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConfigApi.get_config_setting ..."
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling ConfigApi.get_config_setting"
      end
      # verify the required parameter 'config_setting_name' is set
      if @api_client.config.client_side_validation && config_setting_name.nil?
        fail ArgumentError, "Missing the required parameter 'config_setting_name' when calling ConfigApi.get_config_setting"
      end
      # resource path
      local_var_path = "/servers/{server_id}/config/{config_setting_name}".sub('{' + 'server_id' + '}', server_id.to_s).sub('{' + 'config_setting_name' + '}', config_setting_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APIKeyHeader']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConfigSetting')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigApi#get_config_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
