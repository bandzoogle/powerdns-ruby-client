=begin
#PowerDNS Authoritative HTTP API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 0.0.13

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module PowerDNS
  # This represents an authoritative DNS Zone.
  class Zone
    # Opaque zone id (string), assigned by the server, should not be interpreted by the application. Guaranteed to be safe for embedding in URLs.
    attr_accessor :id

    # Name of the zone (e.g. “example.com.”) MUST have a trailing dot
    attr_accessor :name

    # Set to “Zone”
    attr_accessor :type

    # API endpoint for this zone
    attr_accessor :url

    # Zone kind, one of “Native”, “Master”, “Slave”
    attr_accessor :kind

    # RRSets in this zone
    attr_accessor :rrsets

    # The SOA serial number
    attr_accessor :serial

    # The SOA serial notifications have been sent out for
    attr_accessor :notified_serial

    #  List of IP addresses configured as a master for this zone (“Slave” type zones only)
    attr_accessor :masters

    # Whether or not this zone is DNSSEC signed (inferred from presigned being true XOR presence of at least one cryptokey with active being true)
    attr_accessor :dnssec

    # The NSEC3PARAM record
    attr_accessor :nsec3param

    # Whether or not the zone uses NSEC3 narrow
    attr_accessor :nsec3narrow

    # Whether or not the zone is pre-signed
    attr_accessor :presigned

    # The SOA-EDIT metadata item
    attr_accessor :soa_edit

    # The SOA-EDIT-API metadata item
    attr_accessor :soa_edit_api

    #  Whether or not the zone will be rectified on data changes via the API
    attr_accessor :api_rectify

    # MAY contain a BIND-style zone file when creating a zone
    attr_accessor :zone

    # MAY be set. Its value is defined by local policy
    attr_accessor :account

    # MAY be sent in client bodies during creation, and MUST NOT be sent by the server. Simple list of strings of nameserver names, including the trailing dot. Not required for slave zones.
    attr_accessor :nameservers

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'type' => :'type',
        :'url' => :'url',
        :'kind' => :'kind',
        :'rrsets' => :'rrsets',
        :'serial' => :'serial',
        :'notified_serial' => :'notified_serial',
        :'masters' => :'masters',
        :'dnssec' => :'dnssec',
        :'nsec3param' => :'nsec3param',
        :'nsec3narrow' => :'nsec3narrow',
        :'presigned' => :'presigned',
        :'soa_edit' => :'soa_edit',
        :'soa_edit_api' => :'soa_edit_api',
        :'api_rectify' => :'api_rectify',
        :'zone' => :'zone',
        :'account' => :'account',
        :'nameservers' => :'nameservers'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'name' => :'String',
        :'type' => :'String',
        :'url' => :'String',
        :'kind' => :'String',
        :'rrsets' => :'Array<RRSet>',
        :'serial' => :'Integer',
        :'notified_serial' => :'Integer',
        :'masters' => :'Array<String>',
        :'dnssec' => :'BOOLEAN',
        :'nsec3param' => :'String',
        :'nsec3narrow' => :'BOOLEAN',
        :'presigned' => :'BOOLEAN',
        :'soa_edit' => :'String',
        :'soa_edit_api' => :'String',
        :'api_rectify' => :'BOOLEAN',
        :'zone' => :'String',
        :'account' => :'String',
        :'nameservers' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'kind')
        self.kind = attributes[:'kind']
      end

      if attributes.has_key?(:'rrsets')
        if (value = attributes[:'rrsets']).is_a?(Array)
          self.rrsets = value
        end
      end

      if attributes.has_key?(:'serial')
        self.serial = attributes[:'serial']
      end

      if attributes.has_key?(:'notified_serial')
        self.notified_serial = attributes[:'notified_serial']
      end

      if attributes.has_key?(:'masters')
        if (value = attributes[:'masters']).is_a?(Array)
          self.masters = value
        end
      end

      if attributes.has_key?(:'dnssec')
        self.dnssec = attributes[:'dnssec']
      end

      if attributes.has_key?(:'nsec3param')
        self.nsec3param = attributes[:'nsec3param']
      end

      if attributes.has_key?(:'nsec3narrow')
        self.nsec3narrow = attributes[:'nsec3narrow']
      end

      if attributes.has_key?(:'presigned')
        self.presigned = attributes[:'presigned']
      end

      if attributes.has_key?(:'soa_edit')
        self.soa_edit = attributes[:'soa_edit']
      end

      if attributes.has_key?(:'soa_edit_api')
        self.soa_edit_api = attributes[:'soa_edit_api']
      end

      if attributes.has_key?(:'api_rectify')
        self.api_rectify = attributes[:'api_rectify']
      end

      if attributes.has_key?(:'zone')
        self.zone = attributes[:'zone']
      end

      if attributes.has_key?(:'account')
        self.account = attributes[:'account']
      end

      if attributes.has_key?(:'nameservers')
        if (value = attributes[:'nameservers']).is_a?(Array)
          self.nameservers = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      kind_validator = EnumAttributeValidator.new('String', ["Native", "Master", "Slave"])
      return false unless kind_validator.valid?(@kind)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kind Object to be assigned
    def kind=(kind)
      validator = EnumAttributeValidator.new('String', ["Native", "Master", "Slave"])
      unless validator.valid?(kind)
        fail ArgumentError, "invalid value for 'kind', must be one of #{validator.allowable_values}."
      end
      @kind = kind
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          type == o.type &&
          url == o.url &&
          kind == o.kind &&
          rrsets == o.rrsets &&
          serial == o.serial &&
          notified_serial == o.notified_serial &&
          masters == o.masters &&
          dnssec == o.dnssec &&
          nsec3param == o.nsec3param &&
          nsec3narrow == o.nsec3narrow &&
          presigned == o.presigned &&
          soa_edit == o.soa_edit &&
          soa_edit_api == o.soa_edit_api &&
          api_rectify == o.api_rectify &&
          zone == o.zone &&
          account == o.account &&
          nameservers == o.nameservers
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, name, type, url, kind, rrsets, serial, notified_serial, masters, dnssec, nsec3param, nsec3narrow, presigned, soa_edit, soa_edit_api, api_rectify, zone, account, nameservers].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = PowerDNS.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
