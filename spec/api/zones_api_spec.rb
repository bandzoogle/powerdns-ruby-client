=begin
#PowerDNS Authoritative HTTP API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 0.0.13

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for PowerDNS::ZonesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ZonesApi' do
  before do
    # run before each test
    @instance = PowerDNS::ZonesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ZonesApi' do
    it 'should create an instance of ZonesApi' do
      expect(@instance).to be_instance_of(PowerDNS::ZonesApi)
    end
  end

  # unit tests for axfr_export_zone
  # Returns the zone in AXFR format.
  # 
  # @param server_id The id of the server to retrieve
  # @param zone_id The id of the zone to retrieve
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'axfr_export_zone test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for axfr_retrieve_zone
  # Send a DNS NOTIFY to all slaves.
  # Fails when zone kind is not Master or Slave, or master and slave are disabled in the configuration. Only works for Slave if renotify is on. Clients MUST NOT send a body.
  # @param server_id The id of the server to retrieve
  # @param zone_id The id of the zone to retrieve
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'axfr_retrieve_zone test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for check_zone
  # Verify zone contents/configuration.
  # 
  # @param server_id The id of the server to retrieve
  # @param zone_id The id of the zone to retrieve
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'check_zone test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_zone
  # Creates a new domain, returns the Zone on creation.
  # 
  # @param server_id The id of the server to retrieve
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :rrsets “true” (default) or “false”, whether to include the “rrsets” in the response Zone object.
  # @return [Zone]
  describe 'create_zone test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_zone
  # Deletes this zone, all attached metadata and rrsets.
  # 
  # @param server_id The id of the server to retrieve
  # @param zone_id The id of the zone to retrieve
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_zone test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_zone
  # zone managed by a server
  # 
  # @param server_id The id of the server to retrieve
  # @param zone_id The id of the zone to retrieve
  # @param [Hash] opts the optional parameters
  # @return [Zone]
  describe 'list_zone test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_zones
  # List all Zones in a server
  # 
  # @param server_id The id of the server to retrieve
  # @param [Hash] opts the optional parameters
  # @return [Array<Zone>]
  describe 'list_zones test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for notify_zone
  # Send a DNS NOTIFY to all slaves.
  # Fails when zone kind is not Master or Slave, or master and slave are disabled in the configuration. Only works for Slave if renotify is on. Clients MUST NOT send a body.
  # @param server_id The id of the server to retrieve
  # @param zone_id The id of the zone to retrieve
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'notify_zone test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_zone
  # Creates/modifies/deletes RRsets present in the payload and their comments. Returns 204 No Content on success.
  # 
  # @param server_id The id of the server to retrieve
  # @param zone_id 
  # @param zone_struct The zone struct to patch with
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'patch_zone test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for put_zone
  # Modifies basic zone data (metadata).
  # Allowed fields in client body: all except id, url and name. Returns 204 No Content on success.
  # @param server_id The id of the server to retrieve
  # @param zone_id 
  # @param zone_struct The zone struct to patch with
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'put_zone test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for rectify_zone
  # Rectify the zone data.
  # This does not take into account the API-RECTIFY metadata. Fails on slave zones and zones that do not have DNSSEC.
  # @param server_id The id of the server to retrieve
  # @param zone_id The id of the zone to retrieve
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'rectify_zone test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
